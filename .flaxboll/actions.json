{"1758562268242":{"actionType":"saveAll","createdAt":"1758562268242","actionID":"1758562268242","userID":"#TEMP","path":"system.capsules.31c8b616-3bda-4da0-9949-90ba7dd483b5.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"(callback) => {\n  try {\n    // 1) garante string\n    const str = (callback ?? \"\").toString();\n\n    // 2) extrai apenas d√≠gitos (tratamos como centavos)\n    // Ex.: \"R$ 12,34\" -> \"1234\"; \"12.34\" -> \"1234\"; \"abc\" -> \"\"\n    let numeric = str.replace(/\\D/g, \"\");\n\n    // 3) se vazio, considera 0 centavos\n    if (numeric === \"\") numeric = \"0\";\n\n    // 4) converte para inteiro (centavos)\n    const cents = parseInt(numeric, 10);\n    const centsSafe = Number.isFinite(cents) ? Math.abs(Math.floor(cents)) : 0;\n\n    // 5) formata em reais: dividir por 100 e criar string com v√≠rgula\n    const reaisNum = centsSafe / 100;\n    const reaisStr = reaisNum.toFixed(2).replace(\".\", \",\"); // <- vari√°vel bem definida\n    const formatted = `R$ ${reaisStr}`;\n\n    // 6) salva o valor formatado (para exibi√ß√£o)\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a3.iptsChanges.price\"],\n        value: [formatted] // Flaxboll espera array\n      }\n    });\n\n    // 7) salva valor \"bruto\" em centavos (√∫til para salvar no banco)\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a3.iptsChanges.priceRawCents\"],\n        value: [String(centsSafe)]\n      }\n    });\n\n    // 8) mensagem de valida√ß√£o\n    if (centsSafe === 0) {\n      tools.functions.setVar({\n        args: \"\",\n        pass: {\n          keyPath: [\"sc.a3.priceMessage\"],\n          value: [\"Pre√ßo inv√°lido.\"]\n        }\n      });\n    } else {\n      tools.functions.setVar({\n        args: \"\",\n        pass: {\n          keyPath: [\"sc.a3.priceMessage\"],\n          value: [\"\"]\n        }\n      });\n    }\n\n    console.log(\"üí∞ input raw:\", str, \"| numeric:\", numeric, \"| cents:\", centsSafe, \"| formatted:\", formatted);\n\n    // retornar o formatted pode ajudar o componente a atualizar o campo imediatamente\n    return formatted;\n  } catch (err) {\n    console.error(\"Erro ao formatar pre√ßo:\", err);\n    // Em caso de problema, devolve o texto original sem formata√ß√£o\n    return callback;\n  }\n}\n","newValue":""}}