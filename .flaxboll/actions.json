{"1756481860870":{"actionType":"saveAll","createdAt":"1756481860870","actionID":"1756481860870","userID":"#TEMP","path":"system.capsules.601f77d6-dc04-48f5-aa75-03dbda348961.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---- updateDoc.ts\n// ---------- import Local Tools\nimport { getFirestore, doc, updateDoc, Timestamp } from 'firebase/firestore';\nimport { getCtData, testVarType } from '../../project';\n\nexport const css1 =\n  'color: #ffb73b; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: black; background-color: #ffb73b; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    arrRefStrings: string[];\n    arrPathData: string[];\n    arrFuncs: any[];\n  };\n};\n\nexport const updateDocTool = async (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrPathData, arrFuncs } = pass;\n\n  // -----------------------------\n  // ---------- set Firestore Call\n  // -----------------------------\n  // dentro do updateDocTool, logo após montar newArrStringRefs:\n  const newArrStringRefs = arrRefStrings.map(i => testVarType(i, args));\n  console.log('3', { newArrStringRefs });\n\n  // validação dos segmentos\n  const hasBadRef =\n    !Array.isArray(newArrStringRefs) ||\n    newArrStringRefs.length === 0 ||\n    newArrStringRefs.some(s => typeof s !== 'string' || !s.length);\n\n  if (hasBadRef) {\n    console.log('updateDocTool: referência inválida para Firestore doc()', {\n      arrRefStrings,\n      newArrStringRefs,\n    });\n    return; // evita chamar doc() com undefined\n  }\n\n  console.log('3', { newArrStringRefs });\n\n  const fbInit = getCtData('all.temp.fireInit');\n  console.log(fbInit);\n  const fireInit: any = getFirestore(fbInit);\n  console.log({ arrRefStrings });\n  const refColl = doc(fireInit, ...newArrStringRefs);\n\n  // ------ check Data\n  if (!Array.isArray(arrRefStrings))\n    return console.log(\n      'arrRefStrings needs to be a string array',\n      arrRefStrings,\n    );\n\n  // ------ read Data\n  let dataToUpdate: any = {};\n  const newPath = arrPathData.map(i => {\n    const varValue = testVarType(i, args);\n    return varValue;\n  });\n  const condObj = typeof newPath === 'object';\n  const condString = typeof newPath === 'string';\n\n  if (condString) dataToUpdate = getCtData(newPath.join('')) ?? {};\n  if (condObj) {\n    dataToUpdate = Object.assign(newPath) ?? {};\n  }\n\n  console.log({ newPath, dataToUpdate });\n\n  const dateNow = Timestamp.now();\n  console.log({ dateNow });\n  // ------ add date update\n  dataToUpdate.updatedAt = Timestamp.now();\n\n  await updateDoc(refColl, dataToUpdate).catch(err =>\n    console.log('Erro do updateDoc', { err }),\n  );\n\n  // ---------- set Get Value Functions\n  for (const currFunc of arrFuncs) await currFunc(dataToUpdate, args);\n\n  console.log('%cupdateDoc ok', css1);\n  console.log('%cReferencia do Documento', css2, {\n    newArrStringRefs,\n    dataToUpdate,\n  });\n\n  return dataToUpdate;\n};\n","newValue":"// ---- updateDoc.ts\n// ---------- import Local Tools\nimport { getFirestore, doc, updateDoc, Timestamp } from 'firebase/firestore';\nimport { getCtData, testVarType } from '../../project';\n\nexport const css1 =\n  'color: #ffb73b; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: black; background-color: #ffb73b; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    arrRefStrings: string[];\n    arrPathData: string[];\n    arrFuncs: any[];\n  };\n};\n\nexport const updateDocTool = async (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrPathData, arrFuncs } = pass;\n\n  // -----------------------------\n  // ---------- set Firestore Call\n  // -----------------------------\n  // dentro do updateDocTool, logo após montar newArrStringRefs:\n  const newArrStringRefs = arrRefStrings.map(i => testVarType(i, args));\n  console.log('3', { newArrStringRefs });\n\n  // validação dos segmentos\n  const hasBadRef =\n    !Array.isArray(newArrStringRefs) ||\n    newArrStringRefs.length === 0 ||\n    newArrStringRefs.some(s => typeof s !== 'string' || !s.length);\n\n  if (hasBadRef) {\n    console.log('updateDocTool: referência inválida para Firestore doc()', {\n      arrRefStrings,\n      newArrStringRefs,\n    });\n    return; // evita chamar doc() com undefined\n  }\n\n  console.log('3', { newArrStringRefs });\n\n  const fbInit = getCtData('all.temp.fireInit');\n  console.log(fbInit);\n  const fireInit: any = getFirestore(fbInit);\n  console.log({ arrRefStrings });\n  const refColl = doc(fireInit, ...newArrStringRefs);\n\n  // ------ check Data\n  if (!Array.isArray(arrRefStrings))\n    return console.log(\n      'arrRefStrings needs to be a string array',\n      arrRefStrings,\n    );\n\n  // ------ read Data\n  let dataToUpdate: any = {};\n\n  // Resolve cada item de arrPathData com testVarType.\n  // - Se o item for '$var_...' e apontar para um path completo, já vem o VALOR (objeto/array/prim).\n  // - Se for literal de caminho, permanece string (ex.: 'sc.a0.forms.iptsChanges').\n  const resolvedParts = (arrPathData || []).map(i => testVarType(i, args));\n\n  const onlyOneStringPath =\n    resolvedParts.length === 1 && typeof resolvedParts[0] === 'string';\n\n  const allStrings =\n    resolvedParts.length > 0 && resolvedParts.every(i => typeof i === 'string');\n\n  // (1) Array com caminho direto: ['sc.a0.forms.iptsChanges']\n  if (onlyOneStringPath) {\n    const obj = getCtData(resolvedParts[0] as string);\n    if (obj && typeof obj === 'object') dataToUpdate = Object.assign({}, obj);\n    else dataToUpdate = {}; // garante objeto\n  }\n  // (2) Caminho dinâmico por segmentos (tudo string): ['sc.', '$var_all.currScreen', 'a0.forms.iptsChanges']\n  else if (allStrings) {\n    const fullPath = (resolvedParts as string[]).join('');\n    const obj = getCtData(fullPath);\n    if (obj && typeof obj === 'object') dataToUpdate = Object.assign({}, obj);\n    else dataToUpdate = {}; // garante objeto\n  }\n  // (3) Achatar múltiplas fontes num único objeto\n  else {\n    // Cada parte pode ser:\n    // - objeto já resolvido (via $var_...)\n    // - string com caminho (vamos ler com getCtData)\n    for (const part of resolvedParts) {\n      if (!part) continue;\n\n      if (typeof part === 'string') {\n        const val = getCtData(part);\n        if (val && typeof val === 'object') Object.assign(dataToUpdate, val);\n      } else if (typeof part === 'object') {\n        Object.assign(dataToUpdate, part);\n      }\n      // se for primitivo, ignora para manter dataToUpdate como objeto\n    }\n  }\n\n  console.log({ arrPathData, resolvedParts, dataToUpdate });\n\n  const dateNow = Timestamp.now();\n  console.log({ dateNow });\n  // ------ add date update\n  dataToUpdate.updatedAt = Timestamp.now();\n\n  await updateDoc(refColl, dataToUpdate).catch(err =>\n    console.log('Erro do updateDoc', { err }),\n  );\n\n  // ---------- set Get Value Functions\n  for (const currFunc of arrFuncs) await currFunc(dataToUpdate, args);\n\n  console.log('%cupdateDoc ok', css1);\n  console.log('%cReferencia do Documento', css2, {\n    newArrStringRefs,\n    dataToUpdate,\n  });\n\n  return dataToUpdate;\n};\n"}}