{"1755115688885":{"actionType":"saveAll","createdAt":"1755115688885","actionID":"1755115688885","userID":"#TEMP","path":"system.capsules.1271de62-d443-44e4-8b8c-34bbc1e4c7b1.capsUseCodeInfo.capsUseDescription.en","oldValue":"","newValue":"const ImageUploader = () => {\n  const [image, setImage] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [transferred, setTransferred] = useState(0);\n  const fileInputRef = useRef(null);\n\n  // For web, we'll use a hidden input element\n  if (Platform.OS === 'web') {\n    return (\n      <View>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          style={{ display: 'none' }}\n          onChange={handleWebFileChange}\n        />\n        <Button\n          title=\"Select Image\"\n          onPress={() => fileInputRef.current.click()}\n        />\n        {image && (\n          <>\n            <Image \n              source={{ uri: image.uri }} \n              style={{ width: 200, height: 200, marginVertical: 20 }} \n            />\n            <Button\n              title={uploading ? \"Uploading...\" : \"Upload Image\"}\n              onPress={uploadImage}\n              disabled={uploading}\n            />\n          </>\n        )}\n        {uploading && (\n          <View style={{ marginVertical: 20 }}>\n            <ActivityIndicator size=\"large\" />\n            <Text>{transferred}% Completed</Text>\n          </View>\n        )}\n      </View>\n    );\n  }\n\n  // For mobile, we'll use ImagePicker (built-in)\n  const pickImage = async () => {\n    // For mobile, we'll need to use ImagePicker which is part of React Native\n    // Note: This is a simplified approach - in a real app, you might need to handle permissions\n    try {\n      const result = await DocumentPicker.getDocumentAsync({\n        type: 'image/*',\n        copyToCacheDirectory: true,\n      });\n      \n      if (!result.cancelled) {\n        setImage(result);\n      }\n    } catch (err) {\n      Alert.alert('Error', 'Failed to pick image');\n    }\n  };\n\n  const uploadImage = async () => {\n    if (!image) {\n      Alert.alert('Error', 'Please select an image first');\n      return;\n    }\n\n    setUploading(true);\n    setTransferred(0);\n\n    try {\n      // Create a reference to the location you want to upload to\n      const filename = image.uri.split('/').pop();\n      const reference = storage().ref(`images/${filename}`);\n\n      // Upload the file\n      const task = reference.putFile(image.uri);\n\n      // Track upload progress\n      task.on('state_changed', taskSnapshot => {\n        const progress = (taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100;\n        setTransferred(Math.round(progress));\n      });\n\n      // Wait for upload to complete\n      await task;\n\n      // Get the download URL\n      const downloadUrl = await reference.getDownloadURL();\n      \n      Alert.alert('Success', 'Image uploaded successfully!');\n      console.log('Download URL:', downloadUrl);\n      setImage(null);\n    } catch (error) {\n      console.error('Upload error:', error);\n      Alert.alert('Error', 'Failed to upload image');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleWebFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImage({\n        uri: URL.createObjectURL(file),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n      });\n    }\n  };\n\n  return (\n    <View style={{ padding: 20 }}>\n      <Button title=\"Select Image\" onPress={pickImage} />\n      \n      {image && (\n        <>\n          <Image \n            source={{ uri: image.uri }} \n            style={{ width: 300, height: 300, marginVertical: 20 }} \n          />\n          <Button\n            title={uploading ? \"Uploading...\" : \"Upload Image\"}\n            onPress={uploadImage}\n            disabled={uploading}\n          />\n        </>\n      )}\n\n      {uploading && (\n        <View style={{ marginTop: 20 }}>\n          <ActivityIndicator size=\"large\" />\n          <Text>{transferred}% Completed</Text>\n        </View>\n      )}\n    </View>\n  );\n};"}}